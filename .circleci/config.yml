version: 2.1

# The setup field enables you to conditionally trigger configurations from outside the primary .circleci parent directory,
# update pipeline parameters, or generate customized configurations.
setup: true

parameters:
  build-on-change:
    description: Check for file changes to lambdas before build/deploy. Setting this to false will force build.
    type: boolean
    default: true

orbs:
  pocket: pocket/circleci-orbs@2.1.1
  backstage-entity-validator: roadiehq/backstage-entity-validator@0.4.2
  slack: circleci/slack@4.1
  path-filtering: circleci/path-filtering@0.1.5
  continuation: circleci/continuation@0.3.1

# Workflow shortcuts
not_main: &not_main
  filters:
    branches:
      ignore:
        - main

only_main: &only_main
  filters:
    branches:
      only:
        - main

not_dev: &not_dev
  filters:
    branches:
      ignore:
        - dev

only_dev_main: &only_dev_main
  filters:
    branches:
      only:
        - dev
        - main

not_dev_main: &not_dev_main
  filters:
    branches:
      ignore:
        - dev
        - main

only_dev: &only_dev
  filters:
    branches:
      only:
        - dev

# Use for notifying failure of step
slack-fail-post-step: &slack-fail-post-step
  post-steps:
    - slack/notify:
        branch_pattern: main
        event: fail
        template: basic_fail_1

jobs:
  apollo:
    docker:
      # 22.04.2 LTS (Jammy Jellyfish)
      - image: cimg/node:18.16
    steps:
      - checkout
      - run:
          name: install node modules
          command: npm ci
      - run:
          name: generate client and admin graph schemas
          command: |
            export NODE_ENV=production
            npm run build
      - run:
          name: install rover
          command: |
            # download and install Rover
            curl -sSL https://rover.apollo.dev/nix/latest | sh

            # This allows the PATH changes to persist to the next `run` step
            echo 'export PATH=$HOME/.rover/bin:$PATH' >> $BASH_ENV
      - run:
          name: check service - public api
          command: rover subgraph check pocket-client-api@current --schema ./schema-client-api.graphql --name=shareable-lists-api
      - run:
          name: check service - admin api
          # rover expects an APOLLO_KEY env var, which is set in circleci. however, there's a different key for admin-api,
          # so we specifically override the APOLLO_KEY value here
          command: |
            export APOLLO_KEY=$ADMIN_APOLLO_KEY
            rover subgraph check pocket-admin-api@current --schema ./schema-admin-api.graphql --name=shareable-lists-api
      - when:
          condition:
            equal: [main, << pipeline.git.branch >>]
          steps:
            - run:
                name: push service to prod - public api
                command: rover subgraph publish pocket-client-api@current --schema ./schema-client-api.graphql --routing-url https://shareablelistsapi.readitlater.com/ --name=shareable-lists-api
            - run:
                name: push service to prod - admin api
                # rover expects an APOLLO_KEY env var, which is set in circleci. however, there's a different key for admin-api,
                # so we specifically override the APOLLO_KEY value here
                command: |
                  export APOLLO_KEY=$ADMIN_APOLLO_KEY
                  rover subgraph publish pocket-admin-api@current --schema ./schema-admin-api.graphql --routing-url https://shareablelistsapi.readitlater.com/admin --name=shareable-lists-api
      - when:
          condition:
            equal: [dev, << pipeline.git.branch >>]
          steps:
            - run:
                name: push service to dev - public api
                command: rover subgraph publish pocket-client-api@development --schema ./schema-client-api.graphql --routing-url https://shareablelistsapi.getpocket.dev/ --name=shareable-lists-api
            - run:
                name: push service to dev - admin api
                # rover expects an APOLLO_KEY env var, which is set in circleci. however, there's a different key for admin-api,
                # so we specifically override the APOLLO_KEY value here
                command: |
                  export APOLLO_KEY=$ADMIN_APOLLO_KEY
                  rover subgraph publish pocket-admin-api@development --schema ./schema-admin-api.graphql --routing-url https://shareablelistsapi.getpocket.dev/admin --name=shareable-lists-api

  build:
    docker:
      # 22.04.2 LTS (Jammy Jellyfish)
      - image: cimg/node:18.16
    steps:
      - checkout
      # Define the working directory for this job
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: install node modules
          command: npm ci
      - run:
          name: generate prisma client
          command: npm run db:generate-client
      - run:
          name: Run Build
          command: |
            export NODE_ENV=production
            npm run build
      # Copy built files to app_prod folder
      - run:
          name: Setup workspace
          command: |
            mkdir -p /tmp/workspace/app_prod
            cp -r ./node_modules package.json Dockerfile schema*.graphql ./prisma ./dist /tmp/workspace/app_prod
      # Persist built files to workspace
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - app_prod

  test_integrations:
    description: Run integration tests against external services, e.g. Snowplow
    parameters:
      command:
        description: 'Test scripts to run'
        type: string
    docker:
      # The application
      # 22.04.2 LTS (Jammy Jellyfish)
      - image: cimg/node:18.16
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
        environment:
          NODE_ENV: test
          AWS_XRAY_LOG_LEVEL: silent
          AWS_XRAY_CONTEXT_MISSING: IGNORE_ERROR
      # Example for snowplow service
      - image: pocket/snowplow-micro:prod
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
      - image: mysql:8.0@sha256:a43f6e7e7f3a5e5b90f857fbed4e3103ece771b19f0f75880f767cf66bbb6577
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
        environment:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          TZ: 'UTC'
      - image: localstack/localstack@sha256:5b5e903ac421fb9c065f5df4dbdc737c7c77571011b2d3ad4d9d81c7c3ed703a
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
        environment:
          DEBUG: 1
          SERVICES: 's3'
          DATA_DIR: /tmp/localstack/data
          EXTRA_CORS_ALLOWED_HEADERS: Content-Disposition, Content-Type, x-amz-acl
          EXTRA_CORS_EXPOSE_HEADERS: ETag
          HOSTNAME_EXTERNAL: localstack
          PORT_WEB_UI: 8080
    steps:
      - checkout
      - restore_cache:
          keys:
            # when lock file changes, use increasingly general patterns to restore cache
            # If this gets our of sync, you can increment the version (vX).  Just be
            # sure to match that version when saving the cache as well.
            - node-v1-{{ checksum "package-lock.json" }}
            - node-v1-
      - run:
          name: install node modules
          command: npm ci
      - run:
          name: run setup.sh
          command: |
            export $(egrep -v '^#' .docker/local.env | xargs -0) && ./.circleci/scripts/setup.sh --hosts --db --aws
      - run:
          name: run tests
          command: |
            export $(egrep -v '^#' .docker/local.env | xargs -0)
            npm run migrate:reset -- --skip-seed --force
            << parameters.command >>

workflows:
  api:
    when: << pipeline.parameters.build-on-change >>
    jobs:
      - test_integrations:
          <<: *not_main
          context: pocket
          name: test_integrations
          command: 'npm run test-integrations'

      - path-filtering/filter:
          name: check-updated-files
          # 3-column, whitespace-delimited mapping. One mapping per
          # line:
          # <regex path-to-test> <parameter-to-set> <value-of-pipeline-parameter>
          # If build-on-change is false, the 'force-build' will trigger so the param is set to false to avoid double-build
          mapping: |
            lambda/events/.* run-build-deploy-events-lambda-job << pipeline.parameters.build-on-change >>
          base-revision: main
          # this is the path of the configuration we should trigger once
          # path filtering and pipeline parameter value updates are
          # complete.
          config-path: .circleci/continue-config.yml

      - build:
          context: pocket
          <<: *slack-fail-post-step

      - apollo:
          context: pocket
          <<: *slack-fail-post-step
          requires:
            - build

      # Try building the ECS docker image on each branch
      - pocket/docker_build:
          <<: *not_dev_main
          context: pocket
          name: build_docker
          aws-access-key-id: Dev_AWS_ACCESS_KEY
          aws-secret-access-key: Dev_AWS_SECRET_ACCESS_KEY
          aws-region: Dev_AWS_DEFAULT_REGION
          repo-name: ${SERVICE_NAME_LOWER}-dev-app
          ecr-url: ${ACCOUNT_ID_DEV}.dkr.ecr.us-east-1.amazonaws.com
          push: false
          requires:
            - build

      # Build & Deploy the Dev Docker Image
      - pocket/docker_build:
          <<: *only_dev
          context: pocket
          name: build_docker_dev
          aws-access-key-id: Dev_AWS_ACCESS_KEY
          aws-secret-access-key: Dev_AWS_SECRET_ACCESS_KEY
          aws-region: Dev_AWS_DEFAULT_REGION
          codebuild-project-name: ${SERVICE_NAME}-Dev
          codebuild-project-branch: dev
          repo-name: ${SERVICE_NAME_LOWER}-dev-app
          ecr-url: ${ACCOUNT_ID_DEV}.dkr.ecr.us-east-1.amazonaws.com
          push: true
          requires:
            - build

      # Dev
      - pocket/execute_codepipeline:
          <<: *only_dev
          context: pocket
          name: deploy_dev
          environment: Dev
          aws-access-key-id: Dev_AWS_ACCESS_KEY
          aws-secret-access-key: Dev_AWS_SECRET_ACCESS_KEY
          aws-region: Dev_AWS_DEFAULT_REGION
          codepipeline-name: ${SERVICE_NAME}-Dev-CodePipeline
          codebuild-project-name: ${SERVICE_NAME}-Dev
          codebuild-project-branch: dev
          requires:
            - build_docker_dev

      # Build & Deploy the Prod Docker Image
      - pocket/docker_build:
          <<: [*only_main, *slack-fail-post-step]
          context: pocket
          name: build_docker_prod
          aws-access-key-id: Prod_AWS_ACCESS_KEY
          aws-secret-access-key: Prod_AWS_SECRET_ACCESS_KEY
          aws-region: Prod_AWS_DEFAULT_REGION
          codebuild-project-name: ${SERVICE_NAME}-Prod
          codebuild-project-branch: main
          repo-name: ${SERVICE_NAME_LOWER}-prod-app
          ecr-url: ${ACCOUNT_ID_PROD}.dkr.ecr.us-east-1.amazonaws.com
          push: true
          requires:
            - build

      # Prod
      - pocket/execute_codepipeline:
          <<: [*only_main, *slack-fail-post-step]
          context: pocket
          name: deploy_prod
          environment: Prod
          aws-access-key-id: Prod_AWS_ACCESS_KEY
          aws-secret-access-key: Prod_AWS_SECRET_ACCESS_KEY
          aws-region: Prod_AWS_DEFAULT_REGION
          codepipeline-name: ${SERVICE_NAME}-Prod-CodePipeline
          codebuild-project-name: ${SERVICE_NAME}-Prod
          codebuild-project-branch: main
          requires:
            - build_docker_prod

      # Prod
      - pocket/setup_deploy_params:
          <<: [*only_main, *slack-fail-post-step]
          name: setup-deploy-params-prod
          aws_access_key_id: Prod_AWS_ACCESS_KEY
          aws_secret_access_key: Prod_AWS_SECRET_ACCESS_KEY
          context: pocket
          env: Prod
          service_name: ${SERVICE_NAME}

      # Dev
      - pocket/setup_deploy_params:
          <<: *only_dev
          name: setup-deploy-params-dev
          aws_access_key_id: Dev_AWS_ACCESS_KEY
          aws_secret_access_key: Dev_AWS_SECRET_ACCESS_KEY
          context: pocket
          env: Dev
          service_name: ${SERVICE_NAME}

      # Notify sentry of main deployment
      - pocket/sentry_release_notification:
          <<: *only_main
          name: sentry-release-notification-prod
          context: pocket
          repository_name: Pocket/shareable-lists-api
          sentry_project_name: shareable-lists-api
          sentry_env: production
          sentry_org: pocket
          workspace-path: /tmp/workspace
          requires:
            - deploy_prod

      # Notify sentry of dev deployment
      - pocket/sentry_release_notification:
          <<: *only_dev
          name: sentry-release-notification-dev
          context: pocket
          repository_name: Pocket/shareable-lists-api
          sentry_project_name: shareable-lists-api
          sentry_env: development
          sentry_org: pocket
          workspace-path: /tmp/workspace
          requires:
            - deploy_dev
  force-build:
    when:
      not: << pipeline.parameters.build-on-change >>
    jobs:
      - continuation/continue:
          <<: *slack-fail-post-step
          configuration_path: .circleci/continue-config.yml
          parameters: '{"run-build-deploy-events-lambda-job":true}'

      - test_integrations:
          <<: *not_main
          context: pocket
          name: test_integrations
          command: 'npm run test-integrations'

      - build:
          context: pocket
          <<: *slack-fail-post-step

      - apollo:
          context: pocket
          <<: *slack-fail-post-step
          requires:
            - build

      # Try building the ECS docker image on each branch
      - pocket/docker_build:
          <<: *not_dev_main
          context: pocket
          name: build_docker
          aws-access-key-id: Dev_AWS_ACCESS_KEY
          aws-secret-access-key: Dev_AWS_SECRET_ACCESS_KEY
          aws-region: Dev_AWS_DEFAULT_REGION
          repo-name: ${SERVICE_NAME_LOWER}-dev-app
          ecr-url: ${ACCOUNT_ID_DEV}.dkr.ecr.us-east-1.amazonaws.com
          push: false
          requires:
            - build

      # Build & Deploy the Dev Docker Image
      - pocket/docker_build:
          <<: *only_dev
          context: pocket
          name: build_docker_dev
          aws-access-key-id: Dev_AWS_ACCESS_KEY
          aws-secret-access-key: Dev_AWS_SECRET_ACCESS_KEY
          aws-region: Dev_AWS_DEFAULT_REGION
          codebuild-project-name: ${SERVICE_NAME}-Dev
          codebuild-project-branch: dev
          repo-name: ${SERVICE_NAME_LOWER}-dev-app
          ecr-url: ${ACCOUNT_ID_DEV}.dkr.ecr.us-east-1.amazonaws.com
          push: true
          requires:
            - build

      # Dev
      - pocket/execute_codepipeline:
          <<: *only_dev
          context: pocket
          name: deploy_dev
          environment: Dev
          aws-access-key-id: Dev_AWS_ACCESS_KEY
          aws-secret-access-key: Dev_AWS_SECRET_ACCESS_KEY
          aws-region: Dev_AWS_DEFAULT_REGION
          codepipeline-name: ${SERVICE_NAME}-Dev-CodePipeline
          codebuild-project-name: ${SERVICE_NAME}-Dev
          codebuild-project-branch: dev
          requires:
            - build_docker_dev

      # Build & Deploy the Prod Docker Image
      - pocket/docker_build:
          <<: [*only_main, *slack-fail-post-step]
          context: pocket
          name: build_docker_prod
          aws-access-key-id: Prod_AWS_ACCESS_KEY
          aws-secret-access-key: Prod_AWS_SECRET_ACCESS_KEY
          aws-region: Prod_AWS_DEFAULT_REGION
          codebuild-project-name: ${SERVICE_NAME}-Prod
          codebuild-project-branch: main
          repo-name: ${SERVICE_NAME_LOWER}-prod-app
          ecr-url: ${ACCOUNT_ID_PROD}.dkr.ecr.us-east-1.amazonaws.com
          push: true
          requires:
            - build

      # Prod
      - pocket/execute_codepipeline:
          <<: [*only_main, *slack-fail-post-step]
          context: pocket
          name: deploy_prod
          environment: Prod
          aws-access-key-id: Prod_AWS_ACCESS_KEY
          aws-secret-access-key: Prod_AWS_SECRET_ACCESS_KEY
          aws-region: Prod_AWS_DEFAULT_REGION
          codepipeline-name: ${SERVICE_NAME}-Prod-CodePipeline
          codebuild-project-name: ${SERVICE_NAME}-Prod
          codebuild-project-branch: main
          requires:
            - build_docker_prod

      # Prod
      - pocket/setup_deploy_params:
          <<: [*only_main, *slack-fail-post-step]
          name: setup-deploy-params-prod
          aws_access_key_id: Prod_AWS_ACCESS_KEY
          aws_secret_access_key: Prod_AWS_SECRET_ACCESS_KEY
          context: pocket
          env: Prod
          service_name: ${SERVICE_NAME}

      # Dev
      - pocket/setup_deploy_params:
          <<: *only_dev
          name: setup-deploy-params-dev
          aws_access_key_id: Dev_AWS_ACCESS_KEY
          aws_secret_access_key: Dev_AWS_SECRET_ACCESS_KEY
          context: pocket
          env: Dev
          service_name: ${SERVICE_NAME}

      # Notify sentry of main deployment
      - pocket/sentry_release_notification:
          <<: *only_main
          name: sentry-release-notification-prod
          context: pocket
          repository_name: Pocket/shareable-lists-api
          sentry_project_name: shareable-lists-api
          sentry_env: production
          sentry_org: pocket
          workspace-path: /tmp/workspace
          requires:
            - deploy_prod

      # Notify sentry of dev deployment
      - pocket/sentry_release_notification:
          <<: *only_dev
          name: sentry-release-notification-dev
          context: pocket
          repository_name: Pocket/shareable-lists-api
          sentry_project_name: shareable-lists-api
          sentry_env: development
          sentry_org: pocket
          workspace-path: /tmp/workspace
          requires:
            - deploy_dev
